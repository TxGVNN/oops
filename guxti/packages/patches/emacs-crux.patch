diff --git a/crux.el b/crux.el
index bc5c741..0acad80 100644
--- a/crux.el
+++ b/crux.el
@@ -6,7 +6,7 @@
 ;; URL: https://github.com/bbatsov/crux
 ;; Version: 0.4.0
 ;; Keywords: convenience
-;; Package-Requires: ((seq "1.11"))
+;; Package-Requires: ((seq "1.11") (shrink-path "0.3.1"))
 
 ;; This file is not part of GNU Emacs.
 
@@ -38,6 +38,7 @@
 (require 'seq)
 (require 'tramp)
 (require 'subr-x)
+(require 'shrink-path)
 
 (declare-function dired-get-file-for-visit "dired")
 (declare-function org-element-property "org-element")
@@ -203,32 +204,67 @@ the current buffer."
         (funcall function))
     (switch-to-buffer-other-window buffer-name)))
 
+(defun crux-directory-domain-name()
+  "Return name.p.~."
+  (let ((path (split-string (nreverse (shrink-path-dirs default-directory)) "/")))
+    (string-join (cons (nreverse (nth 1 path)) (nthcdr 2 path)) ".")))
+
 ;;;###autoload
-(defun crux-visit-term-buffer ()
+(defun crux-visit-term-buffer (&optional prefix)
   "Create or visit a terminal buffer.
-If the process in that buffer died, ask to restart."
-  (interactive)
-  (crux-start-or-switch-to (lambda ()
-                             (apply crux-term-func (list crux-term-buffer-name)))
-                           (format "*%s*" crux-term-buffer-name))
-  (when (and (null (get-buffer-process (current-buffer)))
-             (y-or-n-p "The process has died.  Do you want to restart it? "))
-    (kill-buffer-and-window)
-    (crux-visit-term-buffer)))
+If PREFIX is not nil, create visit in default-directory"
+  (interactive "P")
+  (let ((session "0"))
+    (if prefix
+        (setq session (crux-directory-domain-name)))
+    (crux-start-or-switch-to (lambda ()
+                               (ansi-term crux-shell (format "%s(%s)" crux-term-buffer-name session)))
+                             (format "*%s(%s)*" crux-term-buffer-name session))
+    (when (null (get-buffer-process (current-buffer)))
+      (kill-buffer-and-window)
+      (ansi-term crux-shell (format "%s(%s)" crux-term-buffer-name session)))))
 
 ;;;###autoload
-(defun crux-visit-shell-buffer ()
+(defun crux-visit-shell-buffer (&optional prefix)
+  "Create or visit a terminal buffer.
+If PREFIX is not nil, create visit in default-directory"
+  (interactive "P")
+  (let ((session "0"))
+    (if prefix
+        (setq session (crux-directory-domain-name)))
+    (crux-start-or-switch-to (lambda ()
+                               (shell (format "*shell(%s)*" session)))
+                             (format "*shell(%s)*" session))
+    (when (null (get-buffer-process (current-buffer)))
+      (shell (format "*shell(%s)*" session)))))
+
+;;;###autoload
+(defun crux-visit-eshell-buffer ()
   "Create or visit a shell buffer.
 If the process in that buffer died, ask to restart."
   (interactive)
   (crux-start-or-switch-to (lambda ()
-                             (apply crux-shell-func (list crux-shell-buffer-name)))
-                           (format "*%s*" crux-shell-buffer-name))
+                             (apply crux-shell-func '("eshell")))
+                           (format "*%s*" "eshell"))
   (when (and (null (get-buffer-process (current-buffer)))
              (not (derived-mode-p 'eshell-mode)) ; eshell has no process
              (y-or-n-p "The process has died.  Do you want to restart it? "))
     (kill-buffer-and-window)
-    (crux-visit-shell-buffer)))
+    (crux-visit-eshell-buffer)))
+
+;;;###autoload
+(defun crux-visit-vterm-buffer (&optional prefix)
+  "Create or visit a terminal buffer.
+If PREFIX is not nil, create visit in default-directory"
+  (interactive "P")
+  (let ((session "0"))
+    (if prefix
+        (setq session (crux-directory-domain-name)))
+    (crux-start-or-switch-to (lambda ()
+                               (vterm (format "*vterm(%s)*" session)))
+                             (format "*vterm(%s)*" session))
+    (when (null (get-buffer-process (current-buffer)))
+      (vterm (format "*vterm(%s)*" session)))))
 
 ;;;###autoload
 (defun crux-indent-rigidly-and-copy-to-clipboard (begin end arg)
@@ -702,7 +736,8 @@ Doesn't mess with special buffers."
 (defun crux-create-scratch-buffer ()
   "Create a new scratch buffer."
   (interactive)
-  (let ((buf (generate-new-buffer "*scratch*")))
+  (let ((buf (generate-new-buffer
+              (format "*scratch-%s*" (format-time-string "%m%d-%H%M%S" (current-time))))))
     (switch-to-buffer buf)
     (funcall initial-major-mode)))
 
@@ -829,5 +864,322 @@ and the entire buffer (in the absense of a region)."
           (list (region-beginning) (region-end))
         (list (point) (line-end-position))))))
 
+;; https://codereview.stackexchange.com/questions/186840/binary-octal-decimal-and-hexadecimal-conversion-in-elisp
+(defun format-binary (b)
+  "Format number b -> binary."
+  (let ((s ""))
+    (while (> b 0)
+      (setq s (concat (number-to-string (logand b 1)) s))
+      (setq b (lsh b -1)))
+    (if (string= "" s) "0" s)))
+
+(defun radix-prefix (radix)
+  "Get radix prefix."
+  (cond ((eq radix 'binary) "0b")
+        ((eq radix 'octal) "0")
+        ((eq radix 'decimal) "")
+        ((eq radix 'hex) "0x")))
+
+(defun radix-format (radix)
+  "Get radix format."
+  (cond ((eq radix 'octal) "%o")
+        ((eq radix 'decimal) "%d")
+        ((eq radix 'hex) "%x")))
+
+(defun format-number-as (number radix)
+  (let ((prefix (radix-prefix radix)))
+    (if (eq radix 'binary)
+        (concat prefix (format-binary number))
+      (concat prefix (format (radix-format radix) number)))))
+
+;;;###autoload
+(defun crux-binary-encode-hex-string (hex-string)
+  "Encode HEX-STRING to BINARY."
+  (let ((res nil))
+    (dotimes (i (length hex-string) (apply #'concat (reverse res)))
+      (let* ((hex-char (substring hex-string i  (+ i 1)))
+             (binary-str (substring (format-number-as (string-to-number hex-char 16) 'binary)
+                                    (length (radix-prefix 'binary)))))
+        (push (concat (substring "0000" (length binary-str)) binary-str " ") res)))))
+
+;;;###autoload
+(defun crux-binary-encode-hex-region  (start end)
+  "Encode a hex string in the selected region(START END)."
+  (interactive "r")
+  (save-excursion
+    (let* ((coding-system-for-read 'raw-text)
+           (coding-system-for-write buffer-file-coding-system)
+           (encoded-text
+            (crux-binary-encode-hex-string
+             (buffer-substring-no-properties start end))))
+      (delete-region start end)
+      (insert encoded-text))))
+
+;;;###autoload
+(defun crux-bytes-encode-string (ascii-string)
+  "Encode ASCII-STRING to hex."
+  (let ((res nil))
+    (set-buffer-multibyte nil)
+    (dotimes (i (length ascii-string) (apply #'concat (reverse res)))
+      (let ((ascii-char (substring ascii-string i  (+ i 1))))
+        ;; (if (not (multibyte-string-p ascii-char)) ascii-char
+        ;;   (setq ascii-char (encode-coding-string ascii-char 'raw-text)))
+        (push (format "%d " (string-to-char ascii-char)) res)))))
+
+;;;###autoload
+(defun crux-bytes-encode-region (start end)
+  "Encode a hex string in the selected region(START END)."
+  (interactive "r")
+  (save-excursion
+    (let* ((coding-system-for-read 'raw-text)
+           (coding-system-for-write buffer-file-coding-system)
+           (encoded-text
+            (crux-bytes-encode-string
+             (buffer-substring-no-properties start end))))
+      (delete-region start end)
+      (insert encoded-text))))
+
+;;;###autoload
+(defun crux-hex-decode-string (hex-string)
+  "Decode to HEX-STRING."
+  (let ((res nil))
+    (dotimes (i (/ (length hex-string) 2) (apply #'concat (reverse res)))
+      (let ((hex-byte (substring hex-string (* 2 i) (* 2 (+ i 1)))))
+        (push (format "%c" (string-to-number hex-byte 16)) res)))))
+
+;;;###autoload
+(defun crux-hex-encode-string (ascii-string)
+  "Encode ASCII-STRING to hex."
+  (let ((res nil))
+    (dotimes (i (length ascii-string) (apply #'concat (reverse res)))
+      (let ((ascii-char (substring ascii-string i  (+ i 1))))
+        (if (not (multibyte-string-p ascii-char)) ascii-char
+          (setq ascii-char (encode-coding-string ascii-char locale-coding-system)))
+        (push (format "%.2x" (string-to-char ascii-char)) res)))))
+
+;;;###autoload
+(defun crux-hex-decode-region (start end)
+  "Decode a hex string in the selected region(START END)."
+  (interactive "r")
+  (save-excursion
+    (let* ((coding-system-for-write 'raw-text)
+	       (coding-system-for-read buffer-file-coding-system)
+           (decoded-text
+            (crux-hex-decode-string
+             (buffer-substring-no-properties start end))))
+      (delete-region start end)
+      (insert decoded-text))))
+
+;;;###autoload
+(defun crux-hex-encode-region (start end)
+  "Encode a hex string in the selected region(START END)."
+  (interactive "r")
+  (save-excursion
+    (let* ((coding-system-for-read 'raw-text)
+           (coding-system-for-write buffer-file-coding-system)
+           (encoded-text
+            (crux-hex-encode-string
+             (buffer-substring-no-properties start end))))
+      (delete-region start end)
+      (insert encoded-text))))
+;
+;;###autoload
+(defun crux-urlencode-region (start end)
+  "Decode a hex string in the selected region(START END)."
+  (interactive "r")
+  (save-excursion
+    (let* ((encoded-text
+            (url-hexify-string
+             (buffer-substring-no-properties start end))))
+      (delete-region start end)
+      (insert encoded-text))))
+
+;;;###autoload
+(defun crux-urldecode-region (start end)
+  "Encode a hex string in the selected region(START END)."
+  (interactive "r")
+  (save-excursion
+    (let* ((decoded-text
+            (url-unhex-string
+             (buffer-substring-no-properties start end))))
+      (delete-region start end)
+      (insert decoded-text))))
+
+(defcustom crux-share-to-transfersh-host "https://transfer.sh"
+  "Provider host of transfer.sh."
+  :type 'string
+  :group 'crux)
+
+;;;###autoload
+(defun crux-share-to-transfersh (&optional downloads)
+  "Share buffer to transfersh.com.
+- DOWNLOADS: The max-downloads"
+  (interactive "p")
+  (let ((temp-file
+         (make-temp-file nil nil (file-name-extension (buffer-name) t)))
+        (url crux-share-to-transfersh-host) (msg ""))
+    (if (region-active-p)
+        (write-region (point) (mark) temp-file)
+      (write-region (point-min) (point-max) temp-file))
+    (when (yes-or-no-p (format "Share to %s (%d)?" url downloads))
+      (when (yes-or-no-p "Encrypt?")
+        (let ((file-hash (md5 (buffer-string))))
+          (shell-command (format "openssl aes-256-cbc -md md5 -k %s -in '%s' -out '%s.enc'"
+                                 file-hash temp-file temp-file))
+          (dired-delete-file temp-file)
+          (setq temp-file (format "%s.enc" temp-file)
+                msg (format "| openssl aes-256-cbc -d -md md5 -k %s -in - 2>/dev/null"
+                            file-hash))))
+      (let ((output (format
+                     "curl -L %s 2>/dev/null %s"
+                     (shell-command-to-string
+                      (format "curl -q -H 'Max-Downloads: %d' --upload-file '%s' %s 2>/dev/null"
+                              downloads temp-file url)) msg)))
+        (kill-new output) (message output))
+      (dired-delete-file temp-file))))
+
+;;;###autoload
+(defun crux-share-to-paste.debian ()
+  "Share buffer to paste.debian.net."
+  (interactive)
+  (let ((temp-file
+         (make-temp-file nil nil (file-name-extension (buffer-name) t)))
+        (msg ""))
+    (if (region-active-p)
+        (write-region (point) (mark) temp-file)
+      (write-region (point-min) (point-max) temp-file))
+    (when (yes-or-no-p "Share to paste.debian.net?")
+      (when (yes-or-no-p "Encrypt?")
+        (let ((file-hash (md5 (buffer-string))))
+          (shell-command (format "openssl aes-256-cbc -md md5 -k %s -in '%s' | base64 > '%s.enc'"
+                                 file-hash temp-file temp-file))
+          (dired-delete-file temp-file)
+          (setq temp-file (format "%s.enc" temp-file)
+                msg (format "| base64 -d | openssl aes-256-cbc -d -md md5 -k %s -in - 2>/dev/null"
+                            file-hash))))
+      (find-file-read-only temp-file)
+      (let ((debpaste-paste-is-hidden t)
+            (debpaste-expire-time (* 8 3600)))
+        (debpaste-paste-buffer (get-file-buffer temp-file)))
+      (let ((output
+             (format "curl -L %s 2>/dev/null %s"
+                     (debpaste-get-param-val 'download-url (debpaste-get-posted-info)) msg)))
+        (kill-new output) (message output))
+      (dired-delete-file temp-file))))
+
+;;;###autoload
+(defun crux-share-to-dpaste ()
+  "Share buffer to dpaste.com."
+  (interactive)
+  (let ((temp-file
+         (make-temp-file nil nil (file-name-extension (buffer-name) t)))
+        (msg ""))
+    (if (region-active-p)
+        (write-region (point) (mark) temp-file)
+      (write-region (point-min) (point-max) temp-file))
+    (when (yes-or-no-p "Share to dpaste.com?")
+      (when (yes-or-no-p "Encrypt?")
+        (let ((file-hash (md5 (buffer-string))))
+          (shell-command (format "openssl aes-256-cbc -md md5 -k %s -in '%s' | base64 > '%s.enc'"
+                                 file-hash temp-file temp-file))
+          (dired-delete-file temp-file)
+          (setq temp-file (format "%s.enc" temp-file)
+                msg (format "| base64 -d | openssl aes-256-cbc -d -md md5 -k %s -in - 2>/dev/null"
+                            file-hash))))
+      (find-file-read-only temp-file)
+      (dpaste-region (point-min) (point-max) (buffer-name))
+      (let ((output
+             (format "curl -L %s.txt 2>/dev/null %s" (car kill-ring) msg)))
+        (kill-new output) (message output))
+      (dired-delete-file temp-file))))
+
+;;;###autoload
+(defun crux-toggle-local-recompile()
+  "Toggle local recompile."
+  (interactive)
+  (if (memq 'recompile after-save-hook)
+      (remove-hook 'after-save-hook 'recompile t)
+    (add-hook 'after-save-hook 'recompile nil t)))
+
+;;;###autoload
+(defun crux-kill-shell-exited ()
+  "Kill shell-mode is exited."
+  (interactive)
+  (mapcar  #'(lambda (buf)
+               (if (eq (buffer-local-value 'major-mode buf) 'shell-mode)
+                   (if (not (get-buffer-process buf))
+                       (kill-buffer buf))))
+           (buffer-list)))
+
+;;;###autoload
+(defun crux-ssh-set-auth-sock(&optional file)
+  "Set ssh-auth-sock(FILE)."
+  (interactive
+   (list (read-file-name "Select SSH_AUTH_SOCK file: " temporary-file-directory nil t "ssh")))
+  (if (not (file-name-absolute-p file))
+      (user-error "%s is not an absolute path" file))
+  (setenv "SSH_AUTH_SOCK" file)
+  (message (shell-command-to-string "ssh-add -l")))
+
+;;;###autoload
+(defun crux-calc-eval (start end)
+  "Fast calc on a region(START END)."
+  (interactive "r")
+  (let ((thing (if (use-region-p)
+                   (buffer-substring start end)
+                 (thing-at-point 'line))))
+    (if current-prefix-arg ; replace in that case
+        (progn
+          (if (use-region-p) (goto-char end) (end-of-line))
+          (insert " = " (calc-eval thing)))
+      (message "%s" (calc-eval thing)))))
+
+;;; DIRED ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;;;###autoload
+(defun dired-share-to-transfersh (&optional downloads)
+  "Share file to transfersh.
+- DOWNLOADS: The max-downloads"
+  (interactive "p")
+  (let* ((url crux-share-to-transfersh-host)
+         (filename (file-name-nondirectory (dired-get-file-for-visit)))
+         (msg (format "-o %s" filename)))
+    (when (yes-or-no-p (format "Share %s to %s (%d)?" filename url downloads))
+      (if (yes-or-no-p "Encrypt?")
+          (let ((file-hash (replace-regexp-in-string "\\(.\\{32\\}\\).*" "\\1" (shell-command-to-string (format "md5sum %s -z" filename)))))
+            (shell-command (format "openssl aes-256-cbc -md md5 -k %s -in '%s' -out '%s.enc'"
+                                   file-hash filename filename))
+            (setq msg (format " -o- | openssl aes-256-cbc -d -md md5 -k %s -out %s -in - "
+                              file-hash filename))
+            (setq filename (format "%s.enc" filename))))
+      (let ((output (format "curl -L %s %s"
+                            (shell-command-to-string
+                             (format "curl -q -H 'Max-Downloads: %d' --upload-file '%s' %s 2>/dev/null"
+                                     downloads filename url)) msg)))
+        (kill-new output) (message output)))))
+
+(declare-function dired-get-marked-files "dired")
+(declare-function dired-dwim-target-directory "dired")
+;;;###autoload
+(defun dired-ediff-files ()
+  "Ediff 2 files on `dired."
+  (interactive)
+  (let ((files (dired-get-marked-files))
+        (wnd (current-window-configuration)))
+    (if (<= (length files) 2)
+        (let ((file1 (car files))
+              (file2 (if (cdr files)
+                         (cadr files)
+                       (read-file-name
+                        "file: "
+                        (dired-dwim-target-directory)))))
+          (if (file-newer-than-file-p file1 file2)
+              (ediff-files file2 file1)
+            (ediff-files file1 file2))
+          (add-hook 'ediff-after-quit-hook-internal
+                    (lambda ()
+                      (setq ediff-after-quit-hook-internal nil)
+                      (set-window-configuration wnd))))
+      (error "No more than 2 files should be marked"))))
+
 (provide 'crux)
 ;;; crux.el ends here
